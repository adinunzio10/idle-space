import React from 'react';
import { View, Text } from 'react-native';
import { BaseModal } from './BaseModal';
import { GameController } from '../../core/GameController';
import { ResourceManager } from '../../core/ResourceManager';
import { formatNumber, NumberFormatter } from '../../utils/numberFormatting';
import { AccessibilityHelper, AccessibilityRoles } from '../../utils/accessibility';

interface StatisticsModalProps {
  isVisible: boolean;
  onClose: () => void;
  gameController: GameController;
}

interface StatItem {
  label: string;
  value: string | number;
  color?: string;
  description?: string;
}

export const StatisticsModal: React.FC<StatisticsModalProps> = ({
  isVisible,
  onClose,
  gameController,
}) => {
  const gameState = gameController.getGameState();
  const resourceManager = gameController.getResourceManager();
  
  if (!gameState) return null;
  
  const formatNumberForDisplay = (value: number): string => {
    return formatNumber(value, { useShortNotation: true, precision: 2 });
  };
  
  const formatTime = (seconds: number): string => {
    return NumberFormatter.formatDuration(seconds);
  };
  
  const getResourceStats = (): StatItem[] => {
    const resources = resourceManager.getResources();
    return [
      {
        label: 'Quantum Data',
        value: formatNumberForDisplay(resources.quantumData.toNumber()),
        color: 'text-primary',
        description: 'Primary currency for expansion'
      },
      {
        label: 'Stellar Essence',
        value: formatNumberForDisplay(resources.stellarEssence.toNumber()),
        color: 'text-secondary',
        description: 'Harvested from dying stars'
      },
      {
        label: 'Void Fragments',
        value: formatNumberForDisplay(resources.voidFragments.toNumber()),
        color: 'text-accent',
        description: 'Collected from dead systems'
      },
      {
        label: 'Resonance Crystals',
        value: formatNumberForDisplay(resources.resonanceCrystals.toNumber()),
        color: 'text-blue-400',
        description: 'Generated by beacon patterns'
      },
      {
        label: 'Chronos Particles',
        value: formatNumberForDisplay(resources.chronosParticles.toNumber()),
        color: 'text-pink-400',
        description: 'Premium time manipulation currency'
      },
    ];
  };
  
  const getGameplayStats = (): StatItem[] => {
    const beaconCount = Object.keys(gameState.beacons).length;
    const totalBeaconLevel = Object.values(gameState.beacons)
      .reduce((sum, beacon) => sum + beacon.level, 0);
    
    return [
      {
        label: 'Active Beacons',
        value: beaconCount,
        color: 'text-text',
        description: 'Total beacons deployed'
      },
      {
        label: 'Total Beacon Levels',
        value: totalBeaconLevel,
        color: 'text-text',
        description: 'Sum of all beacon levels'
      },
      {
        label: 'Save Count',
        value: gameState.saveCount,
        color: 'text-text',
        description: 'Number of times game has been saved'
      },
      {
        label: 'Play Time',
        value: formatTime(gameState.gameTime),
        color: 'text-text',
        description: 'Total time played'
      },
    ];
  };
  
  const renderStatSection = (title: string, stats: StatItem[]) => (
    <View className="mb-8">
      <Text className="text-text text-lg font-bold mb-4">{title}</Text>
      <View className="space-y-3">
        {stats.map((stat, index) => (
          <View key={index} className="flex-row justify-between items-center p-3 bg-background rounded-lg">
            <View className="flex-1">
              <Text className="text-text font-semibold">{stat.label}</Text>
              {stat.description && (
                <Text className="text-text/60 text-sm mt-1">{stat.description}</Text>
              )}
            </View>
            <Text className={`font-bold text-lg ${stat.color || 'text-text'}`}>
              {stat.value}
            </Text>
          </View>
        ))}
      </View>
    </View>
  );
  
  return (
    <BaseModal
      isVisible={isVisible}
      onClose={onClose}
      title="Statistics"
      testID="statistics-modal"
      swipeDirection="down"
    >
      <View className="flex-1">
        {renderStatSection('Resources', getResourceStats())}
        {renderStatSection('Gameplay', getGameplayStats())}
        
        {/* Additional Game Info */}
        <View className="mb-6">
          <Text className="text-text text-lg font-bold mb-4">Game Info</Text>
          <View className="p-4 bg-background rounded-lg">
            <Text className="text-text/80 text-sm">
              Signal Garden is an idle game about spreading consciousness through a dying galaxy. 
              Launch probes to establish quantum communication beacons and create geometric patterns 
              to generate resources and save dying stars.
            </Text>
          </View>
        </View>
        
        {/* Save System Info */}
        <View className="mb-6">
          <Text className="text-text text-lg font-bold mb-4">Save System</Text>
          <View className="p-4 bg-background rounded-lg">
            <Text className="text-text/60 text-sm mb-2">
              Last Saved: {new Date(gameState.lastSaved).toLocaleString()}
            </Text>
            <Text className="text-text/60 text-sm">
              Auto-save active â€¢ Saves every 2 minutes
            </Text>
          </View>
        </View>
      </View>
    </BaseModal>
  );
};