# Task ID: 28
# Title: Enhance Offline Progression System with Queued Probe Completions
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Implement backend offline progression calculations for probes launched before going offline, automatically placing completed beacons and managing network expansion that occurred during offline time through pure business logic systems.
# Details:
Enhance the existing offline progression system to handle queued probe operations with backend-only implementation: 1) **ProbeQueueManager Implementation**: Create ProbeQueueManager class to serialize/deserialize probe queue state across app sessions using AsyncStorage. Handle probe data persistence including launch timestamps, types, target coordinates, and acceleration states. Implement queue validation and corruption recovery mechanisms. 2) **Offline Probe Tracking Backend**: Extend ResourceManager's offline calculation system to track active probes when app becomes inactive. Store probe launch timestamps, types, and target coordinates in persistent storage using AsyncStorage with proper data versioning and migration support. 3) **Completion Calculation Algorithms**: On app return, calculate elapsed offline time and determine which probes completed based on launch time + deployment duration (Pioneer: 30s, Harvester: 90s, Architect: 60s). Account for any manual acceleration bonuses that were active when launched. Implement precise timestamp calculations and handle edge cases for system clock changes. 4) **Automated Beacon Placement System**: For completed probes, automatically spawn beacons at their target coordinates using existing BeaconManager.createBeacon() method. Respect beacon placement rules and connection validation. Update network topology automatically and trigger pattern detection for newly placed beacons using existing PatternDetector from Task 7. 5) **Network Topology Updates**: Implement automated network connection establishment for newly placed beacons. Update beacon adjacency matrices and connection graphs. Trigger pattern detection algorithms to identify new geometric formations created during offline time. 6) **Resource Integration Backend**: Calculate and award resources generated by newly placed beacons during offline time, including pattern bonuses from completed geometric shapes detected by the pattern system. Integrate with existing resource calculation systems and update total resource accumulation in offline progression calculations. Handle multiplicative pattern bonuses and resource overflow scenarios.

# Test Strategy:
Test ProbeQueueManager serialization/deserialization across app restarts with various probe types and launch times. Verify offline time calculation accuracy for probe completion with different deployment durations and manual acceleration states. Test automatic beacon placement at correct coordinates with proper network connection validation. Validate pattern detection triggers for newly placed beacons forming geometric shapes using existing PatternDetector. Test resource calculations include bonuses from new patterns formed by offline beacon placements. Performance testing with large numbers of queued probes (50+) during extended offline periods. Test AsyncStorage persistence under low storage conditions and data corruption scenarios. Validate network topology updates and adjacency matrix calculations for newly placed beacons.
