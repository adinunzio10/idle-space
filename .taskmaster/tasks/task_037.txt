# Task ID: 37
# Title: Create Probe Targeting and Direction Control UI
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Implement backend systems for probe targeting and placement optimization with three targeting modes for dying star systems, pattern completion, and empty sector exploration, focusing exclusively on business logic, algorithms, and placement calculation systems.
# Details:
Create backend ProbeTargetingManager class with three targeting modes: 1) **Dying Star Priority**: Implement algorithm to identify sectors containing dying star systems for Stellar Essence harvesting, using galaxy sector data to calculate optimal expansion paths with weighted scoring based on star system health and resource potential. 2) **Pattern Completion**: Develop NetworkBoundaryAnalyzer using graph traversal algorithms to analyze existing beacon network topology and identify incomplete geometric patterns, calculating optimal probe positions that would complete triangles, squares, pentagons, or hexagons with maximum pattern bonus efficiency. 3) **Empty Sector Exploration**: Create exploration algorithm targeting unexplored sectors for balanced network expansion, using spatial analysis to avoid areas with existing beacon coverage while maintaining optimal network connectivity. Implement PlacementOptimizer class with scoring algorithms that evaluate potential probe positions based on targeting mode, existing beacon density, resource availability, and network connectivity metrics. Create ProbePlacementPredictor with calculation algorithms that determine optimal expansion vectors using probability matrices and spatial analysis. Implement ProbePathCalculator that processes targeting mode preferences, existing beacon positions, probe type capabilities, and resource availability to calculate expansion recommendations. Add targeting preference persistence system integrated with save/load functionality to maintain player choices across sessions. Focus purely on business logic, targeting algorithms, mathematical calculations, and placement optimization systems without any frontend concerns.

# Test Strategy:
Test each targeting mode algorithm independently by running placement calculations and verifying they generate expected expansion recommendations toward dying stars, pattern completion positions, or empty sectors. Validate PlacementOptimizer scoring algorithms produce consistent results across multiple calculation runs with identical input parameters. Test NetworkBoundaryAnalyzer graph traversal performance with complex beacon networks and verify pattern recognition accuracy for geometric formations. Test targeting preference persistence through save/load cycles and verify algorithm state restoration. Test ProbePlacementPredictor calculation accuracy by comparing predicted optimal positions with manually calculated expected results. Validate ProbePathCalculator integration with resource systems and verify recommendations respect resource constraints and probe type limitations. Test performance with large beacon networks (500+ beacons) and verify calculation algorithms maintain acceptable response times.
