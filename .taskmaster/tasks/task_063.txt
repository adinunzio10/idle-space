# Task ID: 63
# Title: Create Quantum Surge UI Components
# Status: pending
# Dependencies: 34, 5
# Priority: medium
# Description: Design and implement frontend components for the active play mechanic including surge button states, countdown timer, progress bar, particle effects, and visual feedback systems with React Native and NativeWind styling.
# Details:
Create comprehensive Quantum Surge UI component suite with the following elements: 1) **SurgeButton Component**: Implement interactive button using TouchableOpacity with three distinct states - cooldown (disabled with countdown overlay), available (pulsing glow animation), and active (intense particle effects). Use NativeWind styling for dark space theme with quantum-themed gradients and borders. Include haptic feedback on press using expo-haptics. 2) **SurgeCountdownTimer Component**: Create MM:SS format countdown display using react-native-reanimated for smooth minute/second transitions, automatically updating every second with useInterval hook. Style with monospace font and quantum glow effects. 3) **SurgeProgressBar Component**: Implement animated progress bar showing remaining surge time using react-native-progress with custom quantum-themed styling, featuring gradient fill and pulse animations during active state. 4) **QuantumParticleEffects Component**: Create particle system using react-native-reanimated with floating quantum particles, screen edge glow overlays, and beacon connection intensification effects. Implement configurable particle density and animation speeds. 5) **SurgeNotificationIndicator Component**: Design availability notification with animated quantum symbols, subtle screen edge highlights, and optional toast notifications when surge becomes available. 6) **SurgeScreenOverlay Component**: Create fullscreen glow effects during active surge with animated gradients and particle layers that don't interfere with gameplay interaction. Integrate all components with QuantumSurgeManager state management and ensure proper cleanup of animations on component unmount.

# Test Strategy:
Test SurgeButton component rendering in all three states (cooldown/available/active) and verify proper state transitions with mock QuantumSurgeManager data. Validate countdown timer accuracy by comparing displayed time with actual countdown values and test MM:SS format edge cases (59â†’00 transitions). Test progress bar animations during 60-second active periods, confirming smooth progress updates and proper completion handling. Verify particle effects performance by monitoring frame rates during intense animations and test cleanup on component unmount to prevent memory leaks. Test surge notification indicator visibility and timing, ensuring notifications appear exactly when cooldown expires. Validate screen overlay effects don't interfere with beacon placement or galaxy map interactions during active surge periods. Test all components respond correctly to QuantumSurgeManager state changes and handle rapid state transitions gracefully.
