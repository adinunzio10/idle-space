# Task ID: 36
# Title: Implement Probe Launch Capacity Upgrades
# Status: pending
# Dependencies: 5, 6, 9
# Priority: medium
# Description: Create a progressive probe launch capacity system backend starting with 1-2 simultaneous probes, upgradeable to 5+ through resource investment with exponential cost scaling and queue management logic.
# Details:
Develop backend ProbeCapacityManager class extending the existing probe system: 1) **Capacity System**: Create capacity property in ProbeManager starting at 1 probe, with upgrades available at capacity levels 2, 3, 4, 5+ using exponential cost scaling (baseCost: 1000 Quantum Data, multiplier: 2.5x per level). Store capacity upgrades in player progression data via SaveManager. 2) **Queue System**: Implement ProbeQueue class managing launch slots with occupied/available states. Create queue validation preventing over-capacity launches and provide queuing for excess launch requests. Add probe launch scheduling with capacity-based parallel execution algorithms. 3) **Resource Integration**: Connect to existing ResourceManager for upgrade cost validation and deduction. Implement upgrade cost calculation methods showing next capacity level cost requirements. Add upgrade processing logic with resource validation preventing invalid purchases. 4) **Save System Integration**: Extend existing save/load functionality to persist probe capacity levels and queue states across sessions. Implement capacity data serialization and restoration maintaining queue integrity during load operations.

# Test Strategy:
Test probe capacity upgrade purchases with insufficient/sufficient resources verifying correct cost deduction and capacity increase in backend state. Validate parallel probe launches respect current capacity limits with proper queue management algorithms. Test queue state management during simultaneous launches and completions ensuring proper slot allocation. Verify save/load functionality preserves probe capacity upgrades and queue states across sessions. Test capacity system integration with existing probe placement and AI systems ensuring no conflicts with concurrent probe operations through pure backend logic validation.
