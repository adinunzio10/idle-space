# Task ID: 24
# Title: Implement Intelligent Probe Placement AI System
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Create an AI-driven probe placement system that strategically expands beacon networks from existing edges, identifies network boundaries, maintains optimal connection distances, and prioritizes geometric pattern completion and dying star targets.
# Details:
Develop ProbeAI class with sophisticated placement algorithms: 1) **Network Edge Detection**: Implement NetworkBoundaryAnalyzer using graph traversal to identify beacon network perimeters and expansion candidates. Use Delaunay triangulation to find network 'holes' and optimal expansion points. 2) **Strategic Placement Algorithm**: Create PlacementOptimizer that scores potential positions based on: connection viability (within beacon range), pattern completion potential (triangle/square/pentagon opportunities), dying star proximity weighting, and network connectivity improvement. Use weighted scoring system with configurable priorities. 3) **Connection Distance Validation**: Implement distance-based validation preventing isolated beacons using configurable max connection distance (default 2x beacon range). Add pathfinding verification ensuring new beacons maintain network connectivity. 4) **Pattern Completion Priority**: Integrate with existing PatternDetector to identify near-complete geometric formations and prioritize positions that would complete triangles (highest priority), squares, pentagons, or hexagons. 5) **Target Prioritization System**: Add PlayerTargetManager allowing manual star marking for AI bias. Weight placement scores toward marked dying stars with exponential decay based on distance. 6) **Adaptive Intelligence**: Implement learning system that tracks successful placements and adjusts scoring weights based on resource generation effectiveness. 7) **Integration with Probe System**: Extend existing ProbeManager to support AI placement mode alongside manual placement, with toggle in settings screen.

# Test Strategy:
Test network boundary detection accuracy with various beacon configurations including isolated clusters and linear chains. Verify connection distance validation prevents orphaned beacons across different network topologies. Test pattern completion priority by setting up near-complete geometric formations and confirming AI completes them correctly. Validate dying star target prioritization with manual star marking and distance-based scoring. Performance testing with large networks (100+ beacons) ensuring AI calculations complete within acceptable time limits. Test adaptive learning by running multiple placement cycles and verifying score weight adjustments improve placement quality over time.
