# Task ID: 41
# Title: Create Chronos Particles Premium Currency System
# Status: pending
# Dependencies: 5, 7, 29
# Priority: medium
# Description: Implement backend-only Chronos Particles system as an earned-only premium currency obtained through achievements, perfect patterns, and special events, used for instant timer completion, network boosts, and cosmetic unlocks.
# Details:
Create ChronosParticleManager class to handle earned-only premium currency backend system. Implement earning mechanisms: 1) **Achievement Rewards**: Integrate with Task 29 achievement system to award 5-50 Chronos Particles per achievement based on difficulty (beacon milestones: 5-10 particles, rare patterns: 20-30 particles, major resource milestones: 15-25 particles). 2) **Perfect Pattern Formation**: Award 3-15 particles when geometric patterns are formed with optimal beacon positioning (triangle: 3, square: 5, pentagon: 8, hexagon: 15), with bonus multipliers for simultaneous multi-pattern formations. 3) **Special Events**: Implement stellar reignition cascade rewards (10-25 particles per star saved), quantum surge perfect timing bonuses (5 particles for activating during optimal resource peaks), and rare entropy reversal events (50+ particles). Create spending system logic: **Instant Completion** (10 particles per probe launch timer skip, 25 particles per upgrade timer skip), **Network Boosts** (50 particles for 2x pattern bonus for 10 minutes, 100 particles for 3x resource generation for 5 minutes), **Cosmetic Unlocks** (beacon visual themes: 25-75 particles, UI color schemes: 50 particles, particle trail effects: 100+ particles). Implement ChronosWallet with secure local storage using expo-secure-store, transaction logging for debugging, strict validation preventing external currency addition, and cost calculation algorithms for all spending categories. Focus on business logic, currency management, and transaction processing without frontend concerns.

# Test Strategy:
Test earning mechanisms by triggering achievements, forming perfect patterns, and initiating special events to verify correct particle awards through backend calculations. Validate spending system logic by processing instant completions and boosts, confirming timer calculations and multiplier algorithms work correctly. Test wallet security by attempting to modify particle counts directly in storage and verifying protection mechanisms. Test transaction logging to ensure all earning and spending events are recorded accurately for debugging purposes. Verify cost calculation algorithms return correct particle amounts for all spending categories.
