# Task ID: 34
# Title: Create Quantum Surge Mechanic with Active Play Rewards
# Status: pending
# Dependencies: 8
# Priority: medium
# Description: Implement backend systems for a powerful active play mechanic providing 10x resource generation for 60 seconds on a 30-minute cooldown, focusing exclusively on business logic, timer management, and resource calculations.
# Details:
Create backend QuantumSurgeManager class with surge mechanics focusing solely on business logic: 1) **Cooldown System**: Implement 30-minute countdown timer using expo-task-manager for background tracking, persisted in save system to survive app restarts. Include precise timestamp tracking and cooldown state management. 2) **Activation System**: Create surge activation logic that triggers immediate 10x multiplier to all resource generation (Quantum Data, Stellar Essence, Void Fragments) for exactly 60 seconds. Implement ResourceMultiplierManager to apply temporary multipliers without affecting base generation rates, ensuring clean separation between base and boosted calculations. 3) **Timer Management**: Implement precise timing mechanisms for both 30-minute cooldown and 60-second active duration using Date objects and interval management. Handle app suspension/resume scenarios with proper time drift correction. 4) **State Persistence**: Ensure surge cooldown state, activation timestamps, and remaining durations persist across app restarts through integration with existing save system. 5) **Anti-Automation Logic**: Implement validation ensuring surge requires manual activation with proper state checks preventing automated triggering or exploitation. 6) **Resource Calculation Integration**: Ensure surge multipliers integrate cleanly with existing resource generation algorithms without permanently modifying base rates or causing calculation errors.

# Test Strategy:
Test cooldown timer accuracy across app suspensions and device restarts using automated timing validation. Verify 10x multiplier applies correctly to all resource types without affecting base generation rates permanently through isolated calculation testing. Test ResourceMultiplierManager integration with existing resource systems. Validate surge state persistence by forcing app restarts during various surge phases (cooldown, active, available). Test anti-automation validation by attempting improper activation scenarios. Performance testing of multiplier calculations during high beacon counts to ensure efficient resource generation algorithms. Verify precise timing mechanisms handle edge cases like device sleep and background app refresh.
